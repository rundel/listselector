),
address = "123 Main St",
age = 39
),
list(
name = list(
first = "Shirley",
last = "Doe"
),
address = "456 1st St",
age = 46
)
)
filter = function(l, selector, recurse = TRUE) {
val = selector(l)
if (!is.null(val) & !recurse) {
subval = NULL
} else {
subval = purrr::map(
setNames(purrr::keep(l, is.list), NULL),
filter,
selector = selector
)
if (!any(purrr::map_lgl(subval, is.list)))
subval = purrr::flatten(subval)
}
purrr::keep(c(val, subval), ~length(.x)!=0)
}
filter(test, function(node) node[["name"]])
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
str(filter(test, function(node) node[["age"]]))
str(filter(test, function(node) node[["age"]], recurse = FALSE))
filter = function(l, selector, recurse = TRUE) {
val = selector(l)
if (!is.null(val) & !recurse) {
subval = NULL
} else {
subval = purrr::map(
setNames(purrr::keep(l, is.list), NULL),
filter,
selector = selector
)
subval = purrr::keep(subval, ~length(.x)!=0)
if (!any(purrr::map_lgl(subval, is.list)))
subval = purrr::flatten(subval)
}
c(val, subval)
}
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
filter(test, function(node) node[["age"]])
names(1)
filter = fucntion(l, selector, recurse = TRUE) {
res = list()
filter_step(l, selector, recurse, pos = "")
res
}
filter = fucntion(l, selector, recurse = TRUE) {
res = list()
filter_step(l, selector, recurse, pos = "")
res
}
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter(.x, selector, recurse, pos = .y)
)
}
filter = fucntion(l, selector, recurse = TRUE) {
res = list()
filter_step(l, selector, recurse, pos = "")
res
}
filter = function(l, selector, recurse = TRUE) {
res = list()
filter_step(l, selector, recurse, pos = "")
res
}
str(filter(test, function(node) node[["name"]]))
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = .y)
)
}
str(filter(test, function(node) node[["name"]]))
?local
filter = function(l, selector, recurse = TRUE) {
res = list()
filter_step(l, selector, recurse, pos = "")
res
}
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = .y)
)
}
str(filter(test, function(node) node[["name"]]))
test = list(
list(
name = list(
first = "Bob",
last = "Smith",
age = list("blah","ugh")
),
address = "123 Main St",
age = 39
),
list(
name = list(
first = "Shirley",
last = "Doe"
),
address = "456 1st St",
age = 46
)
)
str(filter(test, function(node) node[["name"]]))
filter = function(l, selector, recurse = TRUE) {
local({
res = list()
filter_step(l, selector, recurse, pos = "")
res
})
}
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = .y)
)
}
str(filter(test, function(node) node[["name"]]))
gg <- local({
k <- local({
a <- 1
function(y){print(a <<- a+1);f(y)}
})
f <- function(x) if(x) x*k(x-1) else 1
})
sapply(1:5, gg)
filter = local({
res = list()
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = .y)
)
}
init = function(l, selector, recurse = TRUE) {
filter_step(l, selector, recurse, pos = "")
res
}
})
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
filter = local({
res = list()
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = .y)
)
}
function(l, selector, recurse = TRUE) {
res <<- list()
filter_step(l, selector, recurse, pos = "")
res
}
})
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
filter(test, function(node) node[["age"]])
filter = local({
res = list()
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(c(pos, "selector"), collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = c(pos,.y))
)
}
function(l, selector, recurse = TRUE) {
res <<- list()
filter_step(l, selector, recurse, pos = "")
res
}
})
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
filter = local({
res = list()
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(pos, collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = c(pos,.y))
)
}
function(l, selector, recurse = TRUE) {
res <<- list()
filter_step(l, selector, recurse, pos = "")
res
}
})
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
str(filter(test, function(node) node[["last"]]))
filter(test, function(node) node[["age"]])
str(filter(test, function(node) node[["age"]]))
filter = local({
res = list()
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(pos, collapse="::")]] <<- val
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = c(pos,.y))
)
}
function(l, selector, recurse = TRUE) {
res <<- list()
filter_step(l, selector, recurse, pos = c())
res
}
})
str(filter(test, function(node) node[["name"]]))
str(filter(test, function(node) node[["last"]]))
str(filter(test, function(node) node[["age"]]))
res <- fromJSON('http://ergast.com/api/f1/2004/1/results.json')
res <- jsonlite::fromJSON('http://ergast.com/api/f1/2004/1/results.json')
res
res <- jsonlite::fromJSON('http://ergast.com/api/f1/2004/1/results.json', simplifyVector = FALSE)
res
View(res)
str(filter(res, function(node) node[["raceName"]]))
str(filter(res, function(node) node[["raceName"]]))
res <- jsonlite::fromJSON('http://ergast.com/api/f1/2004/results.json', simplifyVector = FALSE)
str(filter(res, function(node) node[["raceName"]]))
View(res)
res <- jsonlite::fromJSON('http://ergast.com/api/f1/2004/results', simplifyVector = FALSE)
res <- jsonlite::fromJSON('http://ergast.com/api/f1/2018/results.json', simplifyVector = FALSE)
View(res)
res <- jsonlite::fromJSON('http://ergast.com/api/f1/2019/results.json?limit=500', simplifyVector = FALSE)
View(res)
str(filter(res, function(node) node[["raceName"]]))
str(filter(res, function(node) node[["familyName"]]))
filter = local({
res = list()
filter_step = function(l, selector, recurse, pos) {
val = selector(l)
if (!is.null(val)) {
res[[paste(pos, collapse="::")]] <<- val
if (!recurse)
return()
}
l = purrr::keep(l, is.list)
if (length(names(l)) == length(l))
new_step = names(l)
else
new_step = seq_along(l)
purrr::map2(
l, new_step,
~ filter_step(.x, selector, recurse, pos = c(pos, .y))
)
}
function(l, selector, recurse = TRUE) {
res <<- list()
filter_step(l, selector, recurse, pos = c())
res
}
})
str(filter(res, function(node) node[["raceName"]]))
system.time(
str(filter(res, function(node) node[["raceName"]]))
)
system.time(
str(filter(res, function(node) node[["raceName"]], recurse = FALSE))
)
system.time(
str(filter(res, function(node) node[["familyName"]]))
)
system.time(
str(filter(res, function(node) node[["familyName"]], recurse = FALSE))
)
quote(f(g + b, c, d(a)))
str(quote(f(g + b, c, d(a))))
class(quote(f(g + b, c, d(a))))
?pairlist
lobstr::sxp(test)
lobstr::ast(f(g + b, c, d(a))))
lobstr::ast(f(g + b, c, d(a)))
?substitute
substitute(f(g + b, c, d(a)))
str(substitute(f(g + b, c, d(a))))
expr = substitute(f(g + b, c, d(a)))
rlang::expr_print(expr)
?list2env
quote(f(g + b, c, d(a)))
quote(f(g + b, c, d(a)))[1]
quote(f(g + b, c, d(a)))[]
quote(f(g + b, c, d(a)))[1]
quote(f(g + b, c, d(a)))[2]
quote(f(g + b, c, d(a)))[3]
class( quote(f(g + b, c, d(a)))[3] )
class( quote(f(g + b, c, d(a)))[3][1] )
class( quote(f(g + b, c, d(a)))[3][1][1] )
class( quote(f(g + b, c, d(a)))[3][2] )
quote(f(g + b, c, d(a)))[3]
quote(f(g + b, c, d(a)))[2]
quote(f(g + b, c, d(a)))[[2]]
quote(f(g + b, c, d(a)))[[2]][1]
quote(f(g + b, c, d(a)))[[2]][[1]
quote(f(g + b, c, d(a)))[[2]][[1]]
quote(f(g + b, c, d(a)))[[2]][[1]]
class(quote(f(g + b, c, d(a)))[[2]][[1]])
quote(a b)
usethis::use_rcpp()
usethis::use_rcpp()
?bh
??bh
usethis::use_package("bh")
usethis::use_package("BH")
?usethis::use_package
usethis::use_package("BH", type = "LinkingTo")
Rcpp::sourceCpp('R/adder.cpp')
add(1)
add("1")
add("1,2,3,4,5")
Rcpp::sourceCpp('src/parse_selector.cpp')
main()
Rcpp::sourceCpp('src/test.cpp')
Rcpp::sourceCpp('src/test.cpp')
test("abc")
test("abcA")
Rcpp::sourceCpp('src/test.cpp')
test("abcA")
test("abcAZ")
Rcpp::sourceCpp('src/test.cpp')
test("abc")
test("1abc")
test("1ab_c")
test("ab_c")
test("ab-c")
_a = 1
. =1
.
.. = 1
..
._ = 1
._
.1 = 1
Rcpp::sourceCpp('src/test.cpp')
Rcpp::sourceCpp('src/test.cpp')
test(".")
Rcpp::sourceCpp('src/test.cpp')
test(".")
test(".1")
test(".A")
test("._")
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/parse_selector.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test.cpp')
Rcpp::sourceCpp('src/test.cpp')
Rcpp::sourceCpp('src/test.cpp')
test("abc")
test("123")
Rcpp::sourceCpp('src/test.cpp')
test("123")
test("..1")
Rcpp::sourceCpp('src/test.cpp')
test("..1")
test("..1")
test("..1")
Rcpp::sourceCpp('src/test.cpp')
test("..1")
test(".1")
test("._1")
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
test("abc")
test("abc[123]")
test("abc[123]]")
test("abc[]")
test("abc[ ]")
test("abc[a]")
test("abc[a v]")
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
test("abc")
test("abc[]")
test("abc[a=1]")
test("abc[a=1][b=2]")
Rcpp::sourceCpp('src/test2.cpp')
test("abc[a=1][b=2]")
Rcpp::sourceCpp('src/test2.cpp')
test("abc[a=1][b=2]")
test("abc")
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
test("abc[a=1][b=2]")
test("abc")
test("")
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
Rcpp::sourceCpp('src/test2.cpp')
test("abc")
test("abc > abc")
Rcpp::sourceCpp('src/test2.cpp')
test("abc > abc")
test("abc > abc[x=123]")
test("abc > abc[x=!123]")
Rcpp::sourceCpp('src/test2.cpp')
test("abc > abc[x=!123]")
test("abc > abc[x<<123]")
test("abc > abc[x<>123]")
